{"documents":[{"pageContent":"Bits and Bytes of Computer and Information Sciences\nStudents are introduced to the fields (and disciplines) of computer science and information science within a small classroom setting. They will learn to make a successful transition from high school to the university, while exploring study skills, student success plans and research opportunities.\nAverage GPA: 3.5051321928460344","metadata":{"course_id":"CMSC100","credits":"1","prerequisites":[],"type":"cs","name":"Bits and Bytes of Computer and Information Sciences"}},{"pageContent":"Introduction to C Programming\nDesign and analysis of programs in C. An introduction to computing using structured programming concepts. Intended for students with no or minimal programming experience.\nAverage GPA: 2.386264656616416","metadata":{"course_id":"CMSC106","credits":"4","prerequisites":[],"type":"cs","name":"Introduction to C Programming"}},{"pageContent":"Introduction to Computer Programming via the Web\nIntroduction to computer programming in the context of developing full featured dynamic web sites. Uses a problem solving approach to teach basics of program design and implementation using JavaScript; relates these skills to creation of dynamic web sites; then explores both the potential and limits of web-based information sources for use in research. Intended to help relate a student's major to these emerging technologies.\nAverage GPA: 2.5378168074699867","metadata":{"course_id":"CMSC122","credits":"3","prerequisites":[],"type":"cs","name":"Introduction to Computer Programming via the Web"}},{"pageContent":"Introduction to Computing\nIntroduces you to the computing field as a whole. You will gain skills used across the spectrum of computing majors and learn about the great variety of routes into the various areas of study and employment in technological fields.\nAverage GPA: N/A","metadata":{"course_id":"CMSC125","credits":"3","prerequisites":[],"type":"cs","name":"Introduction to Computing"}},{"pageContent":"Object-Oriented Programming I\nIntroduction to programming and computer science. Emphasizes understanding and implementation of applications using object-oriented techniques. Develops skills such as program design and testing as well as implementation of programs using a graphical IDE. Programming done in Java.\nAverage GPA: 2.4692104435357036","metadata":{"course_id":"CMSC131","credits":"4","prerequisites":[],"type":"cs","name":"Object-Oriented Programming I"}},{"pageContent":"Object-Oriented Programming II\nIntroduction to use of computers to solve problems using software engineering principles. Design, build, test, and debug medium -size software systems and learn to use relevant tools. Use object-oriented methods to create effective and efficient problem solutions. Use and implement application programming interfaces (APIs). Programming done in Java.\nAverage GPA: 2.624468386730933","metadata":{"course_id":"CMSC132","credits":"4","prerequisites":[],"type":"cs","name":"Object-Oriented Programming II"}},{"pageContent":"Object Oriented Programming I Beyond Fundamentals\nAn introduction to computer science and object-oriented programming for students with prior Java programming knowledge (conditionals, loops, methods). Program design, implementation, and testing using object-oriented techniques. All programming will be done in Java using a graphical IDE.\nAverage GPA: N/A","metadata":{"course_id":"CMSC133","credits":"2","prerequisites":[],"type":"cs","name":"Object Oriented Programming I Beyond Fundamentals"}},{"pageContent":"Introduction to Computer Systems\nIntroduction to the interaction between user programs and the operating system/hardware. Major topics include C programming, introductory systems programming, and assembly language. Other concepts covered include UNIX, machine data representation, thread management, optimization, and virtual memory. Programming is done in the Linux Environment.\nAverage GPA: 2.517170187325627","metadata":{"course_id":"CMSC216","credits":"4","prerequisites":[],"type":"cs","name":"Introduction to Computer Systems"}},{"pageContent":"Discrete Structures\nFundamental mathematical concepts related to computer science, including finite and infinite sets, relations, functions, and propositional logic. Introduction to other techniques, modeling and solving problems in computer science. Introduction to permutations, combinations, graphs, and trees with selected applications.\nAverage GPA: 2.6779751480276874","metadata":{"course_id":"CMSC250","credits":"4","prerequisites":[],"type":"cs","name":"Discrete Structures"}},{"pageContent":"Special Topics in Computer Science\n\nAverage GPA: N/A","metadata":{"course_id":"CMSC298A","credits":"1","prerequisites":[],"type":"cs","name":"Special Topics in Computer Science"}},{"pageContent":"Introduction to Data Science\nAn introduction to the data science pipeline, i.e., the end-to-end process of going from unstructured, messy data to knowledge and actionable insights. Provides a broad overview of several topics including statistical data analysis, basic data mining and machine learning algorithms, large-scale data management, cloud computing, and information visualization.\nAverage GPA: 3.4170012547051436","metadata":{"course_id":"CMSC320","credits":"3","prerequisites":[],"type":"cs","name":"Introduction to Data Science"}},{"pageContent":"Organization of Programming Languages\nA study of programming languages, including their syntax, semantics, and implementation. Several different models of languages are discussed, including dynamic, scripting (e.g., Ruby, Python) functional (e.g., OCaml, Haskell, Scheme), and memory safe systems programming (e.g., Rust). Explores language features such as formal syntax, scoping and binding of variables, higher-order programming, typing, and type polymorphism. Introduces finite automata, context free grammar, parsing, lambda calculus, and basics of security attacks and software security.\nAverage GPA: 2.802368040491685","metadata":{"course_id":"CMSC330","credits":"3","prerequisites":[],"type":"cs","name":"Organization of Programming Languages"}},{"pageContent":"Web Application Development with JavaScript\nProvides an introduction to modern ways of developing Web Applications/Services using JavaScript for both front-end and back-end. The course covers topics on fundamental JavaScript language constructs, server-side JavaScript, back-end data persistence, and client-side JavaScript to build Web Applications that interact with Web services and back-end databases.\nAverage GPA: N/A","metadata":{"course_id":"CMSC335","credits":"3","prerequisites":[],"type":"cs","name":"Web Application Development with JavaScript"}},{"pageContent":"Algorithms\nA systematic study of the complexity of some elementary algorithms related to sorting, graphs and trees, and combinatorics. Algorithms are analyzed using mathematical techniques to solve recurrences and summations.\nAverage GPA: 2.486750423237993","metadata":{"course_id":"CMSC351","credits":"3","prerequisites":[],"type":"cs","name":"Algorithms"}},{"pageContent":"Computer Science Honors Seminar\nOverview of computer science research activities, techniques, and tools. Diverse research areas will be covered, including systems, networks, artificial intelligence, human-computer interaction, software engineering, graphics, vision, and theory.\nAverage GPA: 3.8211881188118815","metadata":{"course_id":"CMSC396H","credits":"1","prerequisites":[],"type":"cs","name":"Computer Science Honors Seminar"}},{"pageContent":"Computer Systems Architecture\nInput/output processors and techniques. Intra-system communication, buses, caches. Addressing and memory hierarchies. Microprogramming, parallelism, and pipelining.\nAverage GPA: 2.8798516204607574","metadata":{"course_id":"CMSC411","credits":"3","prerequisites":[],"type":"cs","name":"Computer Systems Architecture"}},{"pageContent":"Operating Systems\nA hands-on introduction to operating systems, including topics in: multiprogramming, communication and synchronization, memory management, IO subsystems, and resource scheduling polices. The laboratory component consists of constructing a small kernel, including functions for device IO, multi-tasking, and memory management.\nAverage GPA: 2.4906631762652705","metadata":{"course_id":"CMSC412","credits":"4","prerequisites":[],"type":"cs","name":"Operating Systems"}},{"pageContent":"Computer and Network Security\nAn introduction to the topic of security in the context of computer systems and networks. Identify, analyze, and solve network-related security problems in computer systems. Fundamentals of number theory, authentication, and encryption technologies, as well as the practical problems that have to be solved in order to make those technologies workable in a networked environment, particularly in the wide-area Internet environment.\nAverage GPA: 2.8836707862214044","metadata":{"course_id":"CMSC414","credits":"3","prerequisites":[],"type":"cs","name":"Computer and Network Security"}},{"pageContent":"Introduction to Parallel Computing\nIntroduction to parallel computing. Topics include programming for shared memory and distributed memory parallel architectures, and fundamental issues in design, development, and performance analysis of parallel programs.\nAverage GPA: N/A","metadata":{"course_id":"CMSC416","credits":"3","prerequisites":[],"type":"cs","name":"Introduction to Parallel Computing"}},{"pageContent":"Computer Networks\nComputer networks and architectures. The OSI model including discussion and examples of various network layers. A general introduction to existing network protocols. Communication protocol specification, analysis, and testing.\nAverage GPA: 2.3519290928050047","metadata":{"course_id":"CMSC417","credits":"3","prerequisites":[],"type":"cs","name":"Computer Networks"}},{"pageContent":"Advanced Data Structures\nDescription, properties, and storage allocation functions of data structures including balanced binary trees, B-Trees, hash tables, skiplists, tries, KD-Trees and Quadtrees. Algorithms for manipulating structures. Applications from areas such as String Processing, Computer Graphics, Information Retrieval, Computer Networks, Computer Vision, and Operating Systems.\nAverage GPA: 3.0263691041468817","metadata":{"course_id":"CMSC420","credits":"3","prerequisites":[],"type":"cs","name":"Advanced Data Structures"}},{"pageContent":"Introduction to Artificial Intelligence\nIntroduces a range of ideas and methods in AI, varying semester to semester but chosen largely from: automated heuristic search, planning, games, knowledge representation, logical and statistical inference, learning, natural language processing, vision, robotics, cognitive modeling, and intelligent agents. Programming projects will help students obtain a hands-on feel for various topics.\nAverage GPA: 3.1262993762993765","metadata":{"course_id":"CMSC421","credits":"3","prerequisites":[],"type":"cs","name":"Introduction to Artificial Intelligence"}},{"pageContent":"Introduction to Machine Learning\nMachine Learning studies representations and algorithms that allow machines to improve their performance on a task from experience. This is a broad overview of existing methods for machine learning and an introduction to adaptive systems in general. Emphasis is given to practical aspects of machine learning and data mining.\nAverage GPA: 3.1633390119250424","metadata":{"course_id":"CMSC422","credits":"3","prerequisites":[],"type":"cs","name":"Introduction to Machine Learning"}},{"pageContent":"Bioinformatic Algorithms, Databases, and Tools\nAn introduction to the main algorithms, databases, and tools used in bioinformatics. Topics may include assembly and analysis of genome sequences, reconstructing evolutionary histories, predicting protein structure, and clustering of biological data. Use of scripting languages to perform analysis tasks on biological data. No prior knowledge of biology is assumed.\nAverage GPA: 2.9598973607038124","metadata":{"course_id":"CMSC423","credits":"3","prerequisites":[],"type":"cs","name":"Bioinformatic Algorithms, Databases, and Tools"}},{"pageContent":"Database Design\nStudents are introduced to database systems and motivates the database approach as a mechanism for modeling the real world. An in-depth coverage of the relational model, logical database design, query languages, and other database concepts including query optimization, concurrency control; transaction management, and log based crash recovery. Distributed and Web database architectures are also discussed.\nAverage GPA: 2.7143824027072756","metadata":{"course_id":"CMSC424","credits":"3","prerequisites":[],"type":"cs","name":"Database Design"}},{"pageContent":"Game Programming\nAn introduction to the principles and practice of computer game programming and design. This includes an introduction to game hardware and systems, the principles of game design, object and terrain modeling, game physics, artificial intelligence for games, networking for games, rendering and animation, and aural rendering. Course topics are reinforced through the design and implementation of a working computer game.\nAverage GPA: 3.2300602928509905","metadata":{"course_id":"CMSC425","credits":"3","prerequisites":[],"type":"cs","name":"Game Programming"}},{"pageContent":"Computer Vision\nAn introduction to basic concepts and techniques in computervision. This includes low-level operations such as image filtering and edge detection, 3D reconstruction of scenes using stereo and structure from motion, and object detection, recognition and classification.\nAverage GPA: 3.237830825116762","metadata":{"course_id":"CMSC426","credits":"3","prerequisites":[],"type":"cs","name":"Computer Vision"}},{"pageContent":"Introduction to Compilers\nTopics include lexical analysis, parsing, intermediate representations, program analysis, optimization, and code generation.\nAverage GPA: 3.0738933601609655","metadata":{"course_id":"CMSC430","credits":"3","prerequisites":[],"type":"cs","name":"Introduction to Compilers"}},{"pageContent":"Programming Language Technologies and Paradigms\nProgramming language technologies (e.g., object-oriented programming), their implementations and use in software design and implementation.\nAverage GPA: 2.8894824707846416","metadata":{"course_id":"CMSC433","credits":"3","prerequisites":[],"type":"cs","name":"Programming Language Technologies and Paradigms"}},{"pageContent":"Introduction to Human-Computer Interaction\nAssess usability by quantitative and qualitative methods. Conduct task analyses, usability tests, expert reviews, and continuing assessments of working products by interviews, surveys, and logging. Apply design processes and guidelines to develop professional quality user interfaces. Build low-fidelity paper mockups, and a high-fidelity prototype using contemporary tools such as graphic editors and a graphical programming environment (eg: Visual Basic, Java).\nAverage GPA: 3.3491322314049587","metadata":{"course_id":"CMSC434","credits":"3","prerequisites":[],"type":"cs","name":"Introduction to Human-Computer Interaction"}}]}